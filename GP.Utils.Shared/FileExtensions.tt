<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// ==========================================================================
// Currencies.cs
// Green Parrot Framework
// ==========================================================================
// Copyright (c) Sebastian Stehle
// All rights reserved.
// ==========================================================================

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
// ReSharper disable InconsistentNaming
<#
string[][] mimeTypes = File.ReadAllLines(Host.ResolvePath("Resources\\MimeTypes.txt"))
	.Select(x => x.Split(';').Select(z => z.ToLower()).ToArray())
	.Where(x => !char.IsNumber(x[0][0]))
	.Where(x => !x[0].Contains('-'))
	.Where(x => !x[0].Contains('.'))
	.GroupBy(x => x[0])
	.Select(x => x.First()).ToArray();
#>

namespace GP.Utils
{
    /// <summary>
    /// Represents a file extension as a pair of extension and mime type.
    /// </summary>
    [GeneratedCode("GP.Utils", "1.0")]
    [ExcludeFromCodeCoverageAttribute]
    public partial class FileExtension
    {
        private static readonly Dictionary<string, FileExtension> extensionMappings = new Dictionary<string, FileExtension>(<#= mimeTypes.Length #>, StringComparer.OrdinalIgnoreCase);

<# foreach (var mimeType in mimeTypes) { #>
        private static readonly FileExtension @<#= mimeType[0].ToLower() #> = CreateFileExtension(".<#= mimeType[0].ToLower() #>", "<#= mimeType[1] #>");
        /// <summary>
        /// Defines the file extension <#= mimeType[0].ToUpper() #>.
        /// </summary>
        public static FileExtension <#= mimeType[0].ToUpper() #>
        {
            get
            {
                return @<#= mimeType[0].ToLower() #>;
            }
         }
<# } #>
    }
}